using System;
using System.Collections.Generic;
using System.Security;
using System.Security.Cryptography;
using System.Security.Principal;
using System.Threading;

class User
{
    public string Login { get; set; }
    public string PasswordHash { get; set; }
    public string Salt { get; set; }
    public string[] Roles { get; set; }
}

class Protector
{
    private static Dictionary<string, User> _users = new Dictionary<string, User>();

    public static User Register(string userName, string password, string[] roles = null)
    {
        if (_users.ContainsKey(userName))
        {
            throw new ArgumentException($"Користувач із ім'ям '{userName}' вже існує.");
        }

        // Генерація солі
        byte[] salt = new byte[16];
        using (var rng = new RNGCryptoServiceProvider())
        {
            rng.GetBytes(salt);
        }

        // Хешування пароля за допомогою PBKDF2
        using (var pbkdf2 = new Rfc2898DeriveBytes(password, salt, 10000))
        {
            byte[] hash = pbkdf2.GetBytes(32); // 256 біт
            string passwordHash = Convert.ToBase64String(hash);

            var user = new User { Login = userName, PasswordHash = passwordHash, Salt = Convert.ToBase64String(salt), Roles = roles };
            _users.Add(userName, user);

            return user;
        }
    }

    public static bool CheckPassword(string userName, string password)
    {
        if (!_users.ContainsKey(userName))
        {
            throw new ArgumentException($"Користувач із ім'ям '{userName}' не існує.");
        }

        User user = _users[userName];

        using (var pbkdf2 = new Rfc2898DeriveBytes(password, Convert.FromBase64String(user.Salt), 10000))
        {
            byte[] hash = pbkdf2.GetBytes(32); 
            string inputPasswordHash = Convert.ToBase64String(hash);

            // Порівняння збереженого хешу з хешем введеного пароля
            return inputPasswordHash == user.PasswordHash;
        }
    }

    public static void LogIn(string userName, string password)
    {
        if (CheckPassword(userName, password))
        {
            var identity = new GenericIdentity(userName, "OIBAuth");
            var principal = new GenericPrincipal(identity, _users[userName].Roles);
            Thread.CurrentPrincipal = principal;
        }
    }

    public static void OnlyForAdminsFeature()
    {
        if (Thread.CurrentPrincipal == null)
        {
            throw new SecurityException("Thread.CurrentPrincipal не може бути null.");
        }

        if (!Thread.CurrentPrincipal.IsInRole("Admin"))
        {
            throw new SecurityException("Користувач повинен бути у ролі 'Admin' для доступу до цієї функціональності.");
        }

        Console.WriteLine("Вам надано доступ до цієї захищеної функціональності.");
    }
}

class Program
{
    static void Main()
    {
        // Реєстрація користувачів
        Protector.Register("user1", "password1", new[] { "Admin" });
        Protector.Register("user2", "password2", new[] { "Moderator" });
        Protector.Register("user3", "password3", new[] { "User" });
        Protector.Register("user4", "password4", new[] { "User" });

        // Аутентифікація користувача
        Console.Write("Введіть ім'я користувача: ");
        string username = Console.ReadLine();
        Console.Write("Введіть пароль: ");
        string password = Console.ReadLine();

        Protector.LogIn(username, password);

        // Перевірка доступу
        try
        {
            Protector.OnlyForAdminsFeature();
            Console.WriteLine("Доступ надано!");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Відмовлено в доступі: {ex.Message}");
        }
    }
}
